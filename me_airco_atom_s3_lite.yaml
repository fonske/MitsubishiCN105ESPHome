substitutions:
  name: airco-woonkamer
  friendly_name: Airco woonkamer

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  on_boot:
    priority: 200
    then:
      - delay: 30s
      - switch.turn_off:
          id: eps32_s3_led_switch

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: latest

light:
#G35=RGB WS2812C-2020
  - platform: esp32_rmt_led_strip
    name: Led
    id: led
    internal: true
    rgb_order: GRB
    pin: 35
    num_leds: 4
    # RMT 0 channels will be occupied by IR
    rmt_channel: 1
    chipset: ws2812
    restore_mode: ALWAYS_ON  #OFF?

uart:
  id: HP_UART
  baud_rate: 2400
  tx_pin: GPIO1
  rx_pin: GPIO2

# Default logging level
logger:
  #hardware_uart: UART1 # This line can be removed for ESP32 devices
  level: INFO  

# Enable Home Assistant API
api:
  services:
    - service: reboot
      then:
        - logger.log: "Esp reboot..."
        - lambda: |-
            ESP.restart();
#  encryption:
#    key: "xJpzPUEla1JWNtgVhi1J5O/9zweBt7Y9xG3LX/tlq+8=" # needs to be your key

ota:
#  password: "7a7e990eb0f3d57cbeb41e21dffa4331"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${friendly_name}
    password: "configesp"


captive_portal:

# Enable Web server.
web_server:
  port: 80

# External component reference
external_components:
  - source: github://fonske/MitsubishiCN105ESPHome

# Climate entity configuration
climate:
  - platform: cn105
    id: hp
    name: ${friendly_name}
    icon: mdi:heat-pump
    visual:
      min_temperature: 15
      max_temperature: 31
      temperature_step:
        target_temperature: 1
        current_temperature: 0.1
    compressor_frequency_sensor:
      name: Compressor Frequency
    vertical_vane_select:
      name: Vertical Vane
    #horizontal_vane_select:
    #  name: Horizontal Vane
    isee_sensor:
      name: ISEE Sensor
    remote_temperature_timeout: 30min
    debounce_delay : 500ms
    update_interval: 4s
    supports:
      mode: [COOL, HEAT, FAN_ONLY, DRY]
      fan_mode: [AUTO, QUIET, LOW, MEDIUM, HIGH]
      swing_mode: ["OFF", VERTICAL]
  
# diagnostics
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID

  - platform: version
    name: Version
    hide_timestamp: true
    disabled_by_default: false
    icon: mdi:new-box
    entity_category: diagnostic

###  ESP restart button
button:
  - platform: restart
    id: restart_button
    name: Esp restart

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: Signal dB
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: Signal %
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: diagnostic
    device_class: ""

  - platform: uptime
    id: esp32_uptime
    name: "Uptime"
    unit_of_measurement: days
    update_interval: 3600s
    accuracy_decimals: 1
    filters:
      - multiply: 0.000011574
    device_class: duration
    state_class: total_increasing
    entity_category: diagnostic

  - platform: internal_temperature
    name: Internal Esp temperature
    entity_category: diagnostic

switch:
  - platform: template
    id: eps32_s3_led_switch
    name: Led switch #${led_switch}
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON 
    lambda: return id(eps32_s3_led_switch).state;
    turn_on_action:
      - light.turn_on:
          id: led
          brightness: !lambda |-
            // output value must be in range 0 - 1.0
            return id(led_brightness).state / 100.0;
    turn_off_action:
      - light.turn_off:
          id: led

number:
    ## Set led brightness
  - platform: template
    id: led_brightness
    name: Led brightness #${led_brightness}
    icon: mdi:toggle-switch-variant
    mode: slider
    entity_category: config
    optimistic: true
    min_value: 0
    max_value: 100
    step: 10
    initial_value: 70
    restore_value: yes
    unit_of_measurement: "%"
    on_value:
      then:
        - if:
            condition:
              - light.is_on: led
            then:
            - light.turn_on:
                id: led
                brightness: !lambda |-
                  // output value must be in range 0 - 1.0
                  return id(led_brightness).state / 100.0;
substitutions:
  name: "esp32-hp-test"
  friendly_name: Clim Sejour

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf     
    #version: 5.3.0
    #platform_version: 6.8.0

    #type: arduino


mqtt:  
  #broker: homeassistant.local
  broker: home-io.local           # if HA instance name is custom
  username: heatpumpSejour
  password: !secret mqtt_password
  discovery: true



debug:
  update_interval: 5s



# Enable logging
logger:    
  level: DEBUG
  logs:
    EVT_SETS : DEBUG
    WIFI : INFO
    MQTT : INFO
    WRITE_SETTINGS : DEBUG
    SETTINGS : DEBUG
    STATUS : INFO
    CN105Climate: WARN
    CN105: INFO
    climate: WARN
    sensor: WARN
    chkSum : INFO
    WRITE : WARN
    READ : WARN
    Update-ACK : ERROR
    Header: INFO
    Decoder : INFO
    CONTROL_WANTED_SETTINGS: INFO    
    testMutex: DEBUG
    UPDT_ITVL: DEBUG
    CYCLE: DEBUG


# Enable Home Assistant API
api:
  services:    
    - service: reboot
      then:
        - logger.log: "Red√©marrage en cours..."
        - lambda: |-
            esp_restart();

    - service: set_remote_temperature
      variables:
        temperature: float
      then:
        - lambda: 'id(esp32_clim).set_remote_temperature(temperature);'

    - service: use_internal_temperature
      then:
        - lambda: 'id(esp32_clim).set_remote_temperature(0);'
    # - service: test-mutex
    #   then:
    #     - logger.log: "Test de la fonction mutex..."
    #     - lambda: |-
    #         id(esp32_clim).testMutex();
  encryption:
    key: !secret encryption_key_sejour

ota:  
  - platform: esphome
    password: !secret ota_pwd

wifi:
  #ssid: !secret wifi_ssid
  #password: !secret wifi_password
  
  networks:
  - ssid : !secret wifi_ssid3
    password: !secret wifi_password3
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  #- ssid: !secret wifi_ssid2
  #  password: !secret wifi_password2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Heatpump-Sejour Fallback Hotspot"
    password: !secret ota_pwd

captive_portal:

web_server:
  port: 80
  
time:
  - platform: homeassistant
    id: homeassistant_time

# this setting is for local component (code is not on github)
external_components:
#   - source: github://echavet/MitsubishiCN105ESPHome
 - source:
     type: local
     path: components 

        # Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: ${name} ESPHome Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${name} IP
    ssid:
      name: ${name} SSID
    bssid:
      name: ${name} BSSID

  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"


  

# Sensors with general information.
sensor:

  - platform: template
    name: "dg_uart_connected"
    entity_category: DIAGNOSTIC
    lambda: |-
      return (bool) id(esp32_clim).isUARTConnected_;
    update_interval: 30s

  - platform: template
    name: "dg_hp_connected"
    entity_category: DIAGNOSTIC
    lambda: |-
      return (bool) id(esp32_clim).isUARTConnected_;
    update_interval: 30s

  - platform: template
    name: "dg_complete_cycles"
    entity_category: DIAGNOSTIC
    accuracy_decimals: 0
    lambda: |-
      return (unsigned long) id(esp32_clim).nbCompleteCycles_;
    update_interval: 60s

  - platform: template
    name: "dg_total_cycles"
    accuracy_decimals: 0
    entity_category: DIAGNOSTIC
    lambda: |-
      return (unsigned long) id(esp32_clim).nbCycles_;
    update_interval: 60s
  - platform: template
    name: "dg_nb_hp_connections"
    accuracy_decimals: 0
    entity_category: DIAGNOSTIC
    lambda: |-
      return (unsigned int) id(esp32_clim).nbHeatpumpConnections_;
    update_interval: 60s

  - platform: template
    name: "dg_complete_cycles_percent"
    unit_of_measurement: "%"
    accuracy_decimals: 1
    entity_category: DIAGNOSTIC
    lambda: |-      
      unsigned long nbCompleteCycles = id(esp32_clim).nbCompleteCycles_;
      unsigned long nbCycles = id(esp32_clim).nbCycles_;
      if (nbCycles == 0) {
        return 0.0;
      }
      return (float) nbCompleteCycles / nbCycles * 100.0;
    update_interval: 60s
    
  - platform: debug
    free:
      name: "Heap Free"
    # fragmentation:
    #   name: "Heap Fragmentation"
    # block:
    #   name: "Heap Max Block"
    # loop_time:
    #   name: "Loop Time"
    # psram:
    #   name: "Free PSRAM"


  # Uptime sensor.
  - platform: uptime
    name: ${name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${name} WiFi Signal
    update_interval: 60s

  - platform: homeassistant
    id: ha_cdeg_sejour_et_cuisine
    entity_id: sensor.cdeg_sejour_et_cuisine
    internal: true
    on_value:
      then:
        - lambda: |-
            id(esp32_clim).set_remote_temperature(x);

uart:
  id: HP_UART
  baud_rate: 2400
  tx_pin: GPIO17
  rx_pin: GPIO16

climate:
  - platform: cn105  
    name: ${friendly_name}
    id: "esp32_clim"
    compressor_frequency_sensor:
      name: Compressor frequency (clim Sejour)    
    vertical_vane_select:
      name: Orientation de la Vane Verticale
    # horizontal_vane_select:
    #   name: Orientation de la Vane Horizontale
    isee_sensor:
      name: ISEE Sensor
    auto_sub_mode_sensor:
      name: auto-submode sensor
    sub_mode_sensor:
      name: submode sensor
    stage_sensor:
      name: stage sensor      
    remote_temperature_timeout: 15min
    update_interval: 2500ms         # shouldn't be less than 1 second
    debounce_delay : 120ms       # delay to prevent bouncing 
    hp_uptime_connection_sensor:
      name: ${name} HP Uptime Connection
      update_interval: 30s
    supports:
      mode: [COOL, HEAT, FAN_ONLY, DRY]
      fan_mode: [AUTO, QUIET, LOW, MEDIUM, HIGH]
      swing_mode: ["OFF", VERTICAL]
    visual:
      min_temperature: 17
      max_temperature: 23
      temperature_step:
        target_temperature: 0.5
        current_temperature: 0.1



